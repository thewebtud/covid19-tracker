{"version":3,"sources":["img/coronalogo.svg","components/worldwideData/worldwideData.js","components/countrySearch/countrySearch.js","containers/WorldwideContainer.js","components/worldwideData/temp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Worldwide","props","state","confirmed","recovery","death","axios","get","then","response","console","log","data","setState","value","recovered","deaths","className","src","CoronaMaskLogo","alt","class","this","React","Component","countrySearch","type","data-toggle","href","worldwideContainer","temp","App","exact","to","path","component","WorldwideContainer","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,wC,sTCyD5BC,G,MApDf,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAW,EACXC,SAAU,EACVC,MAAO,GALI,EADvB,iEAU0B,IAAD,OACjBC,IAAMC,IAAI,kCACTC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAASG,MACrB,EAAKC,SAAS,CAACV,UAAWM,EAASG,KAAKT,UAAUW,QAClD,EAAKD,SAAS,CAACT,SAAUK,EAASG,KAAKG,UAAUD,QACjD,EAAKD,SAAS,CAACR,MAAOI,EAASG,KAAKI,OAAOF,aAhBvD,+BAsBQ,OACG,6BACI,yBAAKG,UAAY,gCACb,yBAAKC,IAAOC,IAAgBF,UAAU,SAASG,IAAM,2BAEzD,6BACI,uBAAGH,UAAY,kBAAf,4BAGA,6BAAK,6BACT,yBAAKI,MAAM,4BACP,yBAAKJ,UAAU,aACX,uBAAGA,UAAU,kBAAb,aADJ,IACgD,6BADhD,IACsD,6BAClD,uBAAGA,UAAU,kBAAkBK,KAAKpB,MAAMC,YAE9C,yBAAKc,UAAU,aACX,uBAAGA,UAAU,kBAAb,aADJ,IACgD,6BADhD,IACsD,6BAClD,uBAAGA,UAAU,kBAAkBK,KAAKpB,MAAME,WAE9C,yBAAKa,UAAU,SACX,uBAAGA,UAAU,kBAAb,UADJ,IAC6C,6BAD7C,IACmD,6BAC/C,uBAAGA,UAAU,kBAAkBK,KAAKpB,MAAMG,SAGlD,6BAvBJ,IAuBU,6BAvBV,IAuBgB,kCA9C3B,GAA+BkB,IAAMC,YC0DtBC,G,MA3Df,kDACI,WAAYxB,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAW,EACXC,SAAU,EACVC,MAAO,GALI,EADvB,mGAsBQ,OACG,6BACI,yBAAKY,UAAU,4BACX,6BACA,uBAAGA,UAAY,kBAAf,wBADA,IACyD,8BAEzD,yBAAKI,MAAM,YACV,4BAAQA,MAAM,kCAAkCK,KAAK,SAASC,cAAY,YAA1E,kBAEA,wBAAIN,MAAM,iBACN,4BAAI,uBAAGO,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,QACJ,4BAAI,uBAAGA,KAAK,KAAR,kBAIT,6BAAK,6BAEL,yBAAKP,MAAM,4BACX,yBAAKJ,UAAU,aACX,uBAAGA,UAAU,kBAAb,aADJ,IACgD,6BADhD,IACsD,6BAClD,uBAAGA,UAAU,kBAAkBK,KAAKpB,MAAMC,YAE9C,yBAAKc,UAAU,aACX,uBAAGA,UAAU,kBAAb,aADJ,IACgD,6BADhD,IACsD,6BAClD,uBAAGA,UAAU,kBAAkBK,KAAKpB,MAAME,WAE9C,yBAAKa,UAAU,SACX,uBAAGA,UAAU,kBAAb,UADJ,IAC6C,6BAD7C,IACmD,6BAC/C,uBAAGA,UAAU,kBAAkBK,KAAKpB,MAAMG,cAnDjE,GAAmCkB,IAAMC,YCS1BK,G,MARY,WACvB,OACA,yBAAKZ,UAAU,2BACX,kBAAC,EAAD,MACA,kBAAC,EAAD,SCQOa,EAff,kDACI,WAAY7B,GAAQ,uCACVA,GAFd,qDAOQ,OACG,6BACG,yDATd,GAA0BsB,IAAMC,WCyBjBO,MApBf,WACE,OACE,kBAAC,IAAD,KACI,yBAAKd,UAAU,oBACb,yBAAKA,UAAU,YACf,wBAAIA,UAAU,gBACZ,4BAAI,kBAAC,IAAD,CAASe,OAAK,EAACC,GAAI,IAAKhB,UAAU,YAAlC,gBACJ,4BAAI,kBAAC,IAAD,CAASgB,GAAI,KAAMhB,UAAU,YAA7B,kBAGP,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOiB,KAAO,IAAIF,OAAK,EAACG,UAAaC,IACpC,kBAAC,IAAD,CAAOF,KAAO,uBAAuBC,UAAaC,IAClD,kBAAC,IAAD,CAAOF,KAAO,KAAKC,UAAaL,QCRtBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EACJ,kBAAC,IAAD,KACA,kBAAC,EAAD,OAIFC,IAASC,OAAOF,EAAKG,SAASC,eAAe,SDsHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.fa9d7aa0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coronalogo.4f6ef320.svg\";","import React from \"react\";\nimport CoronaMaskLogo from '../../img/coronalogo.svg';\nimport axios from 'axios';\nimport './worldwideData.css';\n\nexport class Worldwide extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            confirmed: 0,\n            recovery: 0,\n            death: 0\n        };\n    }\n\n    componentWillMount() {\n        axios.get('https://covid19.mathdro.id/api')\n        .then(response => {\n            console.log(response.data);\n            this.setState({confirmed: response.data.confirmed.value});\n            this.setState({recovery: response.data.recovered.value});\n            this.setState({death: response.data.deaths.value});\n        })\n    }\n\n    render() {\n       \n        return (\n           <div>\n               <div className = \"worldwide_top_logo_container\">\n                   <img src = {CoronaMaskLogo} className=\"rotate\" alt = \"Go Corona.. Corona Go\" />\n               </div>\n               <div>\n                   <p className = \"worldwide_para\">Data from whole world: </p>\n               </div>\n                   \n                   <br/><br/>\n               <div class=\"worldwide_info_container\">\n                   <div className=\"confirmed\">\n                       <a className=\"category_label\">Confirmed</a> <br/> <br/>\n                       <a className=\"category_value\">{this.state.confirmed}</a>\n                   </div>\n                   <div className=\"recovered\">\n                       <a className=\"category_label\">Recovered</a> <br/> <br/>\n                       <a className=\"category_value\">{this.state.recovery}</a>\n                    </div>  \n                   <div className=\"death\">\n                       <a className=\"category_label\">Deaths</a> <br/> <br/>\n                       <a className=\"category_value\">{this.state.death}</a>\n                    </div>\n               </div>\n               <br/> <br/> <br/>\n           </div>\n        );\n    }\n}\n\nexport default Worldwide;\n","import React from \"react\";\nimport axios from 'axios';\nimport './countrySearch.css';\n\nexport class countrySearch extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            confirmed: 0,\n            recovery: 0,\n            death: 0\n        };\n    }\n\n    componentWillMount() {\n        // axios.get('https://covid19.mathdro.id/api')\n        // .then(response => {\n        //     console.log(response.data);\n        //     this.setState({confirmed: response.data.confirmed.value});\n        //     this.setState({recovery: response.data.recovered.value});\n        //     this.setState({death: response.data.deaths.value});\n        // })\n    }\n\n    render() {\n       \n        return (\n           <div>\n               <div className=\"country_search_container\">\n                   <div>\n                   <p className = \"worldwide_para\">Search for Country: </p> <br/>\n                   </div>\n                   <div class=\"dropdown\">\n                    <button class=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">Select Country\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li><a href=\"#\">HTML</a></li>\n                        <li><a href=\"#\">CSS</a></li>\n                        <li><a href=\"#\">JavaScript</a></li>\n                    </ul>\n                    </div>\n                </div>\n                   <br/><br/>\n\n                   <div class=\"worldwide_info_container\">\n                   <div className=\"confirmed\">\n                       <a className=\"category_label\">Confirmed</a> <br/> <br/>\n                       <a className=\"category_value\">{this.state.confirmed}</a>\n                   </div>\n                   <div className=\"recovered\">\n                       <a className=\"category_label\">Recovered</a> <br/> <br/>\n                       <a className=\"category_value\">{this.state.recovery}</a>\n                    </div>  \n                   <div className=\"death\">\n                       <a className=\"category_label\">Deaths</a> <br/> <br/>\n                       <a className=\"category_value\">{this.state.death}</a>\n                    </div>\n               </div>\n           </div>\n        );\n    }\n}\n\nexport default countrySearch;\n","import React, { Component } from 'react';\nimport WorldwideData from '../components/worldwideData/worldwideData';\nimport CountrySearch from '../components/countrySearch/countrySearch';\nimport './worldwideContainer.css';\n\nconst worldwideContainer = () => {\n    return( \n    <div className=\"worldwide_top_container\">\n        <WorldwideData/>\n        <CountrySearch/>\n    </div>\n    )\n}\nexport default worldwideContainer;\n","import React from \"react\";\n\nexport class temp extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n       \n        return (\n           <div>\n              <h1>Superman at work....</h1>\n           </div>\n        );\n    }\n}\n\nexport default temp;\n","import React from 'react';\nimport './App.css';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Switch, Route, NavLink } from 'react-router-dom';\nimport WorldwideContainer from './containers/WorldwideContainer';\nimport temp from './components/worldwideData/temp';\n\nfunction App() {\n  return (\n    <Router>\n        <div className=\"routingContainer\">\n          <nav className=\"NavLink \">\n          <ul className=\"header width\">\n            <li><NavLink exact to={'/'} className=\"nav-link\"> Worldwide </NavLink></li>\n            <li><NavLink to={'/a'} className=\"nav-link\">Coming soon</NavLink></li>\n          </ul>\n          </nav>\n         <Switch>\n         <Route path = \"/\" exact component = {WorldwideContainer}/>\n          <Route path = \"/coronavirus-tracker\" component = {WorldwideContainer}/>\n          <Route path = \"/a\" component = {temp}/>\n         </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nconst app = (\n  <BrowserRouter>\n  <App/>\n  </BrowserRouter>\n)\n\nReactDOM.render(app, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}