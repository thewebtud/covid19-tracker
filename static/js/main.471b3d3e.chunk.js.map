{"version":3,"sources":["img/coronalogo.svg","components/worldwideData/worldwideData.js","components/countrySearch/countrySearch.js","containers/WorldwideContainer.js","components/worldwideData/temp.js","components/indianStateWise/indianStateWise.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Worldwide","props","state","confirmed","recovery","death","axios","get","then","response","setState","data","value","recovered","deaths","className","src","CoronaMaskLogo","alt","class","this","toPrecision","React","Component","countrySearch","countries","selectedCountry","recoveryPerentage","populateDataForSpecificCountry","type","data-toggle","map","country","index","key","iso2","onClick","bind","name","worldwideContainer","temp","indianStateWise","indianState","stateData","console","log","statewise","Table","striped","bordered","hover","variant","eachState","App","to","path","exact","component","WorldwideContainer","IndianStateWise","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,wC,2UC0D5BC,G,MArDf,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAW,EACXC,SAAU,EACVC,MAAO,GALI,EADvB,iEAU0B,IAAD,OACjBC,IAAMC,IAAI,kCACTC,MAAK,SAAAC,GACF,EAAKC,SAAS,CAACP,UAAWM,EAASE,KAAKR,UAAUS,QAClD,EAAKF,SAAS,CAACN,SAAUK,EAASE,KAAKE,UAAUD,QACjD,EAAKF,SAAS,CAACL,MAAOI,EAASE,KAAKG,OAAOF,aAfvD,+BAqBQ,OACG,6BACI,yBAAKG,UAAY,gCACb,yBAAKC,IAAOC,IAAgBF,UAAU,SAASG,IAAM,2BAEzD,6BACI,uBAAGH,UAAY,kBAAf,4BAGA,6BAAK,6BACT,yBAAKI,MAAM,4BACP,yBAAKJ,UAAU,aACX,uBAAGA,UAAU,kBAAb,aADJ,IACgD,6BADhD,IACsD,6BAClD,uBAAGA,UAAU,kBAAkBK,KAAKlB,MAAMC,YAE9C,yBAAKY,UAAU,aACX,uBAAGA,UAAU,kBAAb,aADJ,IACgD,6BADhD,IACsD,6BAClD,uBAAGA,UAAU,kBAAkBK,KAAKlB,MAAME,WAE9C,yBAAKW,UAAU,SACX,uBAAGA,UAAU,kBAAb,UADJ,IAC6C,6BAD7C,IACmD,6BAC/C,uBAAGA,UAAU,kBAAkBK,KAAKlB,MAAMG,SAGlD,6BACA,uBAAGU,UAAU,4BAAb,yBAAgEK,KAAKlB,MAAME,SAAWgB,KAAKlB,MAAMC,UAAa,KAAKkB,YAAY,GAA/H,MACA,6BAzBJ,IAyBU,6BAzBV,IAyBgB,kCA/C3B,GAA+BC,IAAMC,YCiFtBC,G,MAlFf,kDACI,WAAYvB,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAW,EACXC,SAAU,EACVC,MAAO,EACPoB,UAAW,GACXC,gBAAiB,QACjBC,kBAAmB,GARR,EADvB,iEAa0B,IAAD,OACjBrB,IAAMC,IAAI,4CACTC,MAAK,SAAAC,GACF,EAAKC,SAAS,CAACe,UAAWhB,EAASE,KAAKc,eAE5CL,KAAKQ,+BAA+BR,KAAKlB,MAAMwB,mBAlBvD,oGAyBmCA,GAAkB,IAAD,OAC5CN,KAAKV,SAAS,CAACgB,gBAAiBA,IAChCpB,IAAMC,IAAI,4CAA4CmB,GACrDlB,MAAK,SAAAC,GACF,EAAKC,SAAS,CAACP,UAAWM,EAASE,KAAKR,UAAUS,QAClD,EAAKF,SAAS,CAACN,SAAUK,EAASE,KAAKE,UAAUD,QACjD,EAAKF,SAAS,CAACL,MAAOI,EAASE,KAAKG,OAAOF,aA/BvD,+BAyCc,IAAD,OACL,OACG,6BACI,yBAAKG,UAAU,4BACX,6BACA,uBAAGA,UAAY,kBAAf,wBADA,IACyD,8BAEzD,yBAAKI,MAAM,YACV,4BAAQA,MAAM,kCAAkCU,KAAK,SAASC,cAAY,YAAYV,KAAKlB,MAAMwB,iBAEjG,wBAAIP,MAAM,iBACLC,KAAKlB,MAAMuB,UAAUM,KAAI,SAACC,EAASC,GAChC,OAAO,wBAAIC,IAAKF,EAAQG,KAAMC,QAAS,EAAKR,+BAA+BS,KAAK,EAAML,EAAQM,OAAO,uBAAGJ,IAAKF,EAAQG,MAAOH,EAAQM,aAK7I,6BAAK,6BAEL,yBAAKnB,MAAM,4BACX,yBAAKJ,UAAU,aACX,uBAAGA,UAAU,kBAAb,aADJ,IACgD,6BADhD,IACsD,6BAClD,uBAAGA,UAAU,kBAAkBK,KAAKlB,MAAMC,YAE9C,yBAAKY,UAAU,aACX,uBAAGA,UAAU,kBAAb,aADJ,IACgD,6BADhD,IACsD,6BAClD,uBAAGA,UAAU,kBAAkBK,KAAKlB,MAAME,WAE9C,yBAAKW,UAAU,SACX,uBAAGA,UAAU,kBAAb,UADJ,IAC6C,6BAD7C,IACmD,6BAC/C,uBAAGA,UAAU,kBAAkBK,KAAKlB,MAAMG,SAGlD,6BACA,uBAAGU,UAAU,4BAAb,yBAAgEK,KAAKlB,MAAME,SAAWgB,KAAKlB,MAAMC,UAAa,KAAKkB,YAAY,GAA/H,MACA,6BAjCJ,IAiCU,6BAjCV,IAiCgB,kCA5E3B,GAAmCC,IAAMC,YCS1BgB,G,MARY,WACvB,OACA,yBAAKxB,UAAU,2BACX,kBAAC,EAAD,MACA,kBAAC,EAAD,SCQOyB,EAff,kDACI,WAAYvC,GAAQ,uCACVA,GAFd,qDAOQ,OACG,6BACG,yDATd,GAA0BqB,IAAMC,W,QCwDjBkB,G,MArDf,kDACI,WAAYxC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTwC,YAAY,GACZvC,UAAW,EACXU,UAAW,EACXR,MAAO,EACPsC,UAAW,IAPA,EADvB,iEAa0B,IAAD,OACjBrC,IAAMC,IAAI,2EACTC,MAAK,SAAAC,GACFmC,QAAQC,IAAIpC,EAASE,KAAKA,KAAKmC,WAC/B,EAAKpC,SAAS,CAACiC,UAAWlC,EAASE,KAAKA,KAAKmC,iBAjBzD,+BAuBQ,OACG,yBAAK/B,UAAU,uBACX,kBAACgC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,QAC7B,+BACI,4BACA,iCACA,qCACA,yCACA,yCACA,wCAGJ,+BACK/B,KAAKlB,MAAMyC,UAAUZ,KAAI,SAACqB,EAAWnB,GAAZ,OACrB,4BACA,4BAAKA,EAAM,GACX,4BAAKmB,EAAUlD,OACf,4BAAKkD,EAAUjD,WACf,4BAAKiD,EAAUvC,WACf,4BAAKuC,EAAUtC,mBA1ChD,GAAqCQ,IAAMC,YC0B5B8B,MAvBf,WACE,OACE,kBAAC,IAAD,KACI,yBAAKtC,UAAU,oBACb,yBAAKA,UAAU,YACf,wBAAIA,UAAU,gBACZ,4BAAI,kBAAC,IAAD,CAASuC,GAAI,mBAAoBvC,UAAU,YAA3C,gBACJ,4BAAI,kBAAC,IAAD,CAASuC,GAAI,mBAAoBvC,UAAU,YAA3C,oBACJ,4BAAI,kBAAC,IAAD,CAASuC,GAAI,eAAgBvC,UAAU,YAAvC,kBAGP,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOwC,KAAO,IAAIC,OAAK,EAACC,UAAaC,IACpC,kBAAC,IAAD,CAAOH,KAAO,mBAAmBE,UAAaC,IAC9C,kBAAC,IAAD,CAAOH,KAAO,mBAAmBE,UAAaE,IAC9C,kBAAC,IAAD,CAAOJ,KAAO,eAAeE,UAAajB,KAE3C,gCCbWoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EACJ,kBAAC,IAAD,KACA,kBAAC,EAAD,OAIFC,IAASC,OAAOF,EAAKG,SAASC,eAAe,SDsHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhE,MAAK,SAAAiE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.471b3d3e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coronalogo.4f6ef320.svg\";","import React from \"react\";\nimport CoronaMaskLogo from '../../img/coronalogo.svg';\nimport axios from 'axios';\nimport './worldwideData.css';\n\nexport class Worldwide extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            confirmed: 0,\n            recovery: 0,\n            death: 0\n        };\n    }\n\n    componentWillMount() {\n        axios.get('https://covid19.mathdro.id/api')\n        .then(response => {\n            this.setState({confirmed: response.data.confirmed.value});\n            this.setState({recovery: response.data.recovered.value});\n            this.setState({death: response.data.deaths.value});\n        })\n    }\n\n    render() {\n       \n        return (\n           <div>\n               <div className = \"worldwide_top_logo_container\">\n                   <img src = {CoronaMaskLogo} className=\"rotate\" alt = \"Go Corona.. Corona Go\" />\n               </div>\n               <div>\n                   <p className = \"worldwide_para\">Data from whole world: </p>\n               </div>\n                   \n                   <br/><br/>\n               <div class=\"worldwide_info_container\">\n                   <div className=\"confirmed\">\n                       <a className=\"category_label\">Confirmed</a> <br/> <br/>\n                       <a className=\"category_value\">{this.state.confirmed}</a>\n                   </div>\n                   <div className=\"recovered\">\n                       <a className=\"category_label\">Recovered</a> <br/> <br/>\n                       <a className=\"category_value\">{this.state.recovery}</a>\n                    </div>  \n                   <div className=\"death\">\n                       <a className=\"category_label\">Deaths</a> <br/> <br/>\n                       <a className=\"category_value\">{this.state.death}</a>\n                    </div>\n               </div>\n               <br/>    \n               <p className=\"recovery_percentage_para\">Recovery Percentage: {((this.state.recovery / this.state.confirmed) * 100).toPrecision(2)}% </p>\n               <br/> <br/> <br/>\n           </div>\n        );\n    }\n}\n\nexport default Worldwide;\n","import React from \"react\";\nimport axios from 'axios';\nimport './countrySearch.css';\n\nexport class countrySearch extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            confirmed: 0,\n            recovery: 0,\n            death: 0,\n            countries: [],\n            selectedCountry: 'India',\n            recoveryPerentage: 0\n        };\n    }\n\n    componentWillMount() {\n        axios.get('https://covid19.mathdro.id/api/countries')\n        .then(response => {\n            this.setState({countries: response.data.countries});\n        });\n        this.populateDataForSpecificCountry(this.state.selectedCountry);\n    }\n\n    componentWillUpdate() {\n\n    }\n\n    populateDataForSpecificCountry(selectedCountry) {\n        this.setState({selectedCountry: selectedCountry});\n        axios.get('https://covid19.mathdro.id/api/countries/'+selectedCountry)\n        .then(response => {\n            this.setState({confirmed: response.data.confirmed.value});\n            this.setState({recovery: response.data.recovered.value});\n            this.setState({death: response.data.deaths.value});\n        });\n    }\n\n    // handleCountryChange (countryName) {\n    //     console.log(countryName);\n    //     this.setState({selectedCountry : countryName});\n    //     this.populateDataForSpecificCountry();\n    // }\n\n    render() {\n        return (\n           <div>\n               <div className=\"country_search_container\">\n                   <div>\n                   <p className = \"worldwide_para\">Search for Country: </p> <br/>\n                   </div>\n                   <div class=\"dropdown\">\n                    <button class=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">{this.state.selectedCountry}\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        {this.state.countries.map((country, index) => {\n                            return <li key={country.iso2} onClick={this.populateDataForSpecificCountry.bind(this, country.name)}><a key={country.iso2}>{country.name}</a></li>\n                        })}\n                    </ul>\n                    </div>\n                </div>\n                   <br/><br/>\n\n                   <div class=\"worldwide_info_container\">\n                   <div className=\"confirmed\">\n                       <a className=\"category_label\">Confirmed</a> <br/> <br/>\n                       <a className=\"category_value\">{this.state.confirmed}</a>\n                   </div>\n                   <div className=\"recovered\">\n                       <a className=\"category_label\">Recovered</a> <br/> <br/>\n                       <a className=\"category_value\">{this.state.recovery}</a>\n                    </div>  \n                   <div className=\"death\">\n                       <a className=\"category_label\">Deaths</a> <br/> <br/>\n                       <a className=\"category_value\">{this.state.death}</a>\n                    </div>\n               </div>\n               <br/>    \n               <p className=\"recovery_percentage_para\">Recovery Percentage: {((this.state.recovery / this.state.confirmed) * 100).toPrecision(2)}% </p>\n               <br/> <br/> <br/>\n           </div>\n        );\n    }\n}\n\nexport default countrySearch;\n","import React, { Component } from 'react';\nimport WorldwideData from '../components/worldwideData/worldwideData';\nimport CountrySearch from '../components/countrySearch/countrySearch';\nimport './worldwideContainer.css';\n\nconst worldwideContainer = () => {\n    return( \n    <div className=\"worldwide_top_container\">\n        <WorldwideData/>\n        <CountrySearch/>\n    </div>\n    )\n}\nexport default worldwideContainer;\n","import React from \"react\";\n\nexport class temp extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n       \n        return (\n           <div>\n              <h1>Superman at work....</h1>\n           </div>\n        );\n    }\n}\n\nexport default temp;\n","import React from \"react\";\nimport axios from 'axios';\nimport { Table } from 'react-bootstrap';\nimport './indianStateWise.css'\n\nexport class indianStateWise extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            indianState:'',\n            confirmed: 0,\n            recovered: 0,\n            death: 0,\n            stateData: []\n            \n        };\n    }\n\n    componentWillMount() {\n        axios.get('https://api.rootnet.in/covid19-in/unofficial/covid19india.org/statewise')\n        .then(response => {\n            console.log(response.data.data.statewise);\n            this.setState({stateData: response.data.data.statewise});\n        });\n        \n    }\n\n    render() {\n        return (\n           <div className=\"statewise_outer_div\">\n               <Table striped bordered hover variant=\"dark\">\n                        <thead>\n                            <tr>\n                            <th>#</th>\n                            <th>State</th>\n                            <th>Confirmed</th>\n                            <th>Recovered</th>\n                            <th>Deaths</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.stateData.map((eachState, index)=>(\n                                 <tr>\n                                 <td>{index+1}</td>\n                                 <td>{eachState.state}</td>\n                                 <td>{eachState.confirmed}</td>\n                                 <td>{eachState.recovered}</td>\n                                 <td>{eachState.deaths}</td>\n                                 </tr>\n                            ))}\n                           \n                        </tbody>\n                </Table>\n           </div>\n        );\n    }\n}\n\nexport default indianStateWise;\n","import React from 'react';\nimport './App.css';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Switch, Route, NavLink } from 'react-router-dom';\nimport WorldwideContainer from './containers/WorldwideContainer';\nimport temp from './components/worldwideData/temp';\nimport IndianStateWise from './components/indianStateWise/indianStateWise';\n\nfunction App() {\n  return (\n    <Router>\n        <div className=\"routingContainer\">\n          <nav className=\"NavLink \">\n          <ul className=\"header width\">\n            <li><NavLink to={'/covid19-tracker'} className=\"nav-link\"> Worldwide </NavLink></li>\n            <li><NavLink to={'/india-statewise'} className=\"nav-link\">India-Statewise</NavLink></li>\n            <li><NavLink to={'/coming-soon'} className=\"nav-link\">Coming Soon</NavLink></li>\n          </ul>\n          </nav>\n         <Switch>\n         <Route path = \"/\" exact component = {WorldwideContainer}/>\n          <Route path = \"/covid19-tracker\" component = {WorldwideContainer}/>\n          <Route path = \"/india-statewise\" component = {IndianStateWise}/>\n          <Route path = \"/coming-soon\" component = {temp}/>\n         </Switch>\n         <hr/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nconst app = (\n  <BrowserRouter>\n  <App/>\n  </BrowserRouter>\n)\n\nReactDOM.render(app, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}